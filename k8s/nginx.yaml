# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx-deployment
# spec:
#   replicas:
#   selector:
#     matchLabels:
#       app: nginx
#   template:
#     metadata:
#       labels:
#         app: nginx
#     spec:
#       containers:
#         - name: nginx
#           image: nginx:latest
#           ports:
#             - containerPort: 80
#           volumeMounts:
#             - name: nginx-config
#               mountPath: /etc/nginx/nginx.conf
#               subPath: nginx.conf
#       volumes:
#         - name: nginx-config
#           configMap:
#             name: nginx-configmap

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-service
# spec:
#   selector:
#     app: nginx
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80

# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: nginx-configmap
# data:
#   nginx.conf: |
#     worker_processes auto;

#     events {
#         worker_connections 1024;
#     }

#     http {
#         upstream api_backend {
#             server api-0.api.default.svc.cluster.local:8080;
#             server api-1.api.default.svc.cluster.local:8080;
#             server api-2.api.default.svc.cluster.local:8080;
#         }

#         server {
#             listen 80;
#             server_name localhost;

#             location / {
#                 resolver kube-dns.kube-system.svc.cluster.local valid=10s;
#                 proxy_pass http://api_backend;
#                 proxy_set_header Host $host;
#                 proxy_set_header X-Real-IP $remote_addr;
#                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#                 proxy_set_header X-Forwarded-Proto $scheme;
#                 proxy_connect_timeout 5s;
#                 proxy_send_timeout 10s;
#                 proxy_read_timeout 10s;
#                 proxy_http_version 1.1;
#                 proxy_set_header Connection "";
#                 proxy_redirect off;
#             }

#             location /healthz {
#                 # Health check endpoint
#                 return 200 'OK';
#             }

#             error_page 500 502 503 504 /50x.html;
#             location = /50x.html {
#                 root html;
#             }
#         }
#     }

# ---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: egress-policy
# spec:
#   podSelector: {}
#   egress:
#     - to:
#         - ipBlock:
#             cidr: 0.0.0.0/0
#             except:
#               - 192.168.0.0/24 # Example: Exclude internal network CIDR
#       ports:
#         - protocol: TCP
#           port: 80
#         - protocol: UDP
#           port: 53
